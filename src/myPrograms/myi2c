#include <stdbool.h>
#include <stdint.h>
#include "bsp.h"
#include "TM4C123GH6PM.h"
/* #include "cmsis_gcc.h" */
#include "system_TM4C123GH6PM.h"
/* #include "lm4f120h5qr.h" */
#define SYS_CLOCK_HZ 16000000U

/* I2C1 */
/* 23=PA6 -> Scl  */
/* 24=PA7 -> Sda */


void SetSlaveAddress(uint8_t address);
void setRW(uint8_t mode);
void WriteByte(uint8_t dataByte );
void ReadByte(uint8_t* byte);


void SetSlaveAddress(uint8_t slaveaddress){
	I2C1->MSA = (slaveaddress <<1);
}

void setRW(uint8_t mode){
	// 0 = Write
	// 1 = Read
	
	if (mode==0){
		I2C1->MSA &= ~(1<<0);
	}
	else {
		I2C1->MSA |= (1<<0);
	}
}
void WriteByte(uint8_t dataByte){
	/* SetSlaveAddress(0x70); */
	uint8_t check = 0x00;
	uint8_t conditions = (1<<2) |(1<<1) | (1<<0);
	conditions = 0x07;
	setRW(0);
	I2C1->MDR = dataByte;
	I2C1->MCS = conditions;

	uint8_t x = 2;
	check = I2C1->MSA;

	while((I2C1->MCS & 0x01) != 0);		// wait untill all bits are sent

	if((I2C1->MCS & (1<<1)) !=0){
		if((I2C1->MCS & (1<<4)) == (1<<4)){
			// controller lost arbitration
		}
		else{
			I2C1->MCS = (1<<2); // send stop
			while((I2C1->MCS & (1<<0)) !=0);
		}
	}
}

void ReadByte(uint8_t* byte){
	/* SetSlaveAddress(0x70); */
	setRW(1);
	uint8_t conditions = 0x07;
	/* I2C1->MDR = 0x00; */
	I2C1->MCS = conditions;
	uint8_t ad = I2C1->MSA;

	while((I2C1->MCS & 0x01) ==1){}		// wait untill all bits are sent
	*byte = I2C1->MDR ;
	if((I2C1->MCS & (1<<1)) !=0){
		if((I2C1->MCS & (1<<4)) == (1<<4)){
			// controller lost arbitration
		}
		else{
			I2C1->MCS = (1<<2); // send stop
			while((I2C1->MCS & (1<<0)) !=0);
		}
	}
}
void PortF_Init(void){
  // only PF0 needs to be unlocked, other bits can't be locked
  SYSCTL->RCGCGPIO = 0x20;
  /* GPIOF->LOCK = 0x4C4F434B;   // 2) unlock GPIO Port F */
  /* GPIOF->CR = 0x1F;           // allow changes to PF4-0 */
  /* GPIOF->AMSEL = 0x00;        // 3) disable analog on PF */
  /* GPIOF->PCTL = 0x00000000;   // 4) PCTL GPIO on PF4-0 */
  GPIOF->DIR = 0x0E;          // 5) PF4,PF0 in, PF3-1 out
  GPIOF->AFSEL = 0x00;        // 6) disable alt funct on PF7-0
  GPIOF->PUR = 0x11;          // enable pull-up on PF0 and PF4
  GPIOF->DEN = 0x1F;          // 7) enable digital I/O on PF4-0
}
int main() {
	uint8_t byte;
	PortF_Init();
	SYSCTL->RCGCI2C = (1<<1);
	SYSCTL->RCGCGPIO |= (1<<0) | (1<<5);

	GPIOA->AFSEL = (1<<7) | (1<<6);
	GPIOA->DEN = (1<<7) | (1<<6);

	GPIOA->ODR = (1<<7);		// Open drain for sda
	/* GPIOA->PCTL &= (0xFF000000); */
	GPIOA->PCTL = (3<<28) | (3<<24);

	I2C1->MCR = (1<<4);
	I2C1->MTPR = (7<<0);
	SetSlaveAddress(0x68);
	WriteByte(0x00);		// Stop, Start and run condition.
	ReadByte(&byte);

	if (byte == 0xea){
		GPIOF->DATA = LED_GREEN;
	}
	else{
		GPIOF->DATA = LED_RED;
	}

	while(1);
	return 0;
}
